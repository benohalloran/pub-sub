#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'pubsub_types'

module Concord
  module PubSub
    module PubSubBroker
      class Client
        include ::Thrift::Client

        def subscribe(topic, host, port)
          send_subscribe(topic, host, port)
          recv_subscribe()
        end

        def send_subscribe(topic, host, port)
          send_message('subscribe', Subscribe_args, :topic => topic, :host => host, :port => port)
        end

        def recv_subscribe()
          result = receive_message(Subscribe_result)
          return
        end

        def unsubscribe(topic, host, port)
          send_unsubscribe(topic, host, port)
          recv_unsubscribe()
        end

        def send_unsubscribe(topic, host, port)
          send_message('unsubscribe', Unsubscribe_args, :topic => topic, :host => host, :port => port)
        end

        def recv_unsubscribe()
          result = receive_message(Unsubscribe_result)
          return
        end

        def publish(topic, message)
          send_publish(topic, message)
          recv_publish()
        end

        def send_publish(topic, message)
          send_message('publish', Publish_args, :topic => topic, :message => message)
        end

        def recv_publish()
          result = receive_message(Publish_result)
          return
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_subscribe(seqid, iprot, oprot)
          args = read_args(iprot, Subscribe_args)
          result = Subscribe_result.new()
          @handler.subscribe(args.topic, args.host, args.port)
          write_result(result, oprot, 'subscribe', seqid)
        end

        def process_unsubscribe(seqid, iprot, oprot)
          args = read_args(iprot, Unsubscribe_args)
          result = Unsubscribe_result.new()
          @handler.unsubscribe(args.topic, args.host, args.port)
          write_result(result, oprot, 'unsubscribe', seqid)
        end

        def process_publish(seqid, iprot, oprot)
          args = read_args(iprot, Publish_args)
          result = Publish_result.new()
          @handler.publish(args.topic, args.message)
          write_result(result, oprot, 'publish', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Subscribe_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TOPIC = 1
        HOST = 2
        PORT = 3

        FIELDS = {
          TOPIC => {:type => ::Thrift::Types::STRING, :name => 'topic'},
          HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
          PORT => {:type => ::Thrift::Types::I32, :name => 'port'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Subscribe_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Unsubscribe_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TOPIC = 1
        HOST = 2
        PORT = 3

        FIELDS = {
          TOPIC => {:type => ::Thrift::Types::STRING, :name => 'topic'},
          HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
          PORT => {:type => ::Thrift::Types::I32, :name => 'port'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Unsubscribe_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Publish_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        TOPIC = 1
        MESSAGE = 2

        FIELDS = {
          TOPIC => {:type => ::Thrift::Types::STRING, :name => 'topic'},
          MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Publish_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
